
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  username: 'username',
  image: 'image',
  password: 'password',
  dob: 'dob',
  pan: 'pan',
  aadharNumber: 'aadharNumber',
  gstin: 'gstin',
  address: 'address',
  state: 'state',
  city: 'city',
  zip: 'zip',
  panVerified: 'panVerified',
  termsAccepted: 'termsAccepted',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  isBanned: 'isBanned',
  userType: 'userType',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  identifier: 'identifier',
  otp: 'otp',
  expires_at: 'expires_at',
  verificationType: 'verificationType',
  createdAt: 'createdAt'
};

exports.Prisma.PanVerificationDataScalarFieldEnum = {
  userId: 'userId',
  provider: 'provider',
  result: 'result',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPurchasedServicesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceId: 'serviceId',
  purchaseDate: 'purchaseDate',
  expiryDate: 'expiryDate',
  planDays: 'planDays',
  planDiscount: 'planDiscount',
  agreementAcceptedAt: 'agreementAcceptedAt',
  agreementData: 'agreementData'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  percentOff: 'percentOff',
  expiryDate: 'expiryDate',
  minAmount: 'minAmount',
  maxAmount: 'maxAmount',
  serviceId: 'serviceId',
  comboPlanId: 'comboPlanId',
  planDays: 'planDays',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  paymentId: 'paymentId',
  couponId: 'couponId',
  userId: 'userId',
  serviceId: 'serviceId',
  comboPlanId: 'comboPlanId',
  amount: 'amount',
  tenure: 'tenure',
  currency: 'currency',
  status: 'status',
  paymentGateway: 'paymentGateway',
  idempotencyKey: 'idempotencyKey',
  webhookResponse: 'webhookResponse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  extraData: 'extraData'
};

exports.Prisma.UserDocumentsScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  userId: 'userId',
  documentUrl: 'documentUrl',
  reviewedDocumentUrl: 'reviewedDocumentUrl',
  status: 'status',
  reviewedBy: 'reviewedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgreementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  content: 'content',
  version: 'version',
  hash: 'hash',
  signatoryPerson: 'signatoryPerson',
  companyName: 'companyName',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceAgreementScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  agreementId: 'agreementId'
};

exports.Prisma.ComboPlanAgreementScalarFieldEnum = {
  id: 'id',
  comboPlanId: 'comboPlanId',
  agreementId: 'agreementId'
};

exports.Prisma.ComboPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  taxPercent: 'taxPercent',
  active: 'active',
  tenureDiscounts: 'tenureDiscounts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComboPlanServiceScalarFieldEnum = {
  id: 'id',
  comboPlanId: 'comboPlanId',
  serviceId: 'serviceId'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  tag: 'tag',
  label: 'label',
  serviceClass: 'serviceClass',
  description: 'description',
  chart: 'chart',
  comparisonTitle: 'comparisonTitle',
  recommendation: 'recommendation',
  price: 'price',
  taxPercent: 'taxPercent',
  tenureDiscounts: 'tenureDiscounts',
  features: 'features',
  faq: 'faq',
  active: 'active',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceTradingScalarFieldEnum = {
  id: 'id',
  buy_stock_list: 'buy_stock_list',
  sell_stock_list: 'sell_stock_list',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserType = exports.$Enums.UserType = {
  INDIVIDUAL: 'INDIVIDUAL',
  BUSINESS: 'BUSINESS'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.VerificationType = exports.$Enums.VerificationType = {
  EMAIL_UPDATE: 'EMAIL_UPDATE',
  PHONE_UPDATE: 'PHONE_UPDATE',
  EMAIL_VERIFY: 'EMAIL_VERIFY',
  PHONE_VERIFY: 'PHONE_VERIFY',
  RESET_PASS_VERIFY: 'RESET_PASS_VERIFY',
  CONSENT: 'CONSENT',
  AGREEMENT_ACCEPTANCE: 'AGREEMENT_ACCEPTANCE'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  RESUBMISSION_REQUIRED: 'RESUBMISSION_REQUIRED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  TRADING: 'TRADING',
  RESEARCH_ADVISORY: 'RESEARCH_ADVISORY',
  RESEARCH_ADVISORY_MODEL_PORTFOLIO: 'RESEARCH_ADVISORY_MODEL_PORTFOLIO',
  RESEARCH_ADVISORY_PORTFOLIO_REVIEW: 'RESEARCH_ADVISORY_PORTFOLIO_REVIEW',
  INVESTMENT_ADVISORY: 'INVESTMENT_ADVISORY',
  RESEARCH_ADVISORY_MUTUAL_FUNDS: 'RESEARCH_ADVISORY_MUTUAL_FUNDS',
  SMALLCASE: 'SMALLCASE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Otp: 'Otp',
  panVerificationData: 'panVerificationData',
  UserPurchasedServices: 'UserPurchasedServices',
  Coupon: 'Coupon',
  Transaction: 'Transaction',
  UserDocuments: 'UserDocuments',
  Agreement: 'Agreement',
  ServiceAgreement: 'ServiceAgreement',
  ComboPlanAgreement: 'ComboPlanAgreement',
  ComboPlan: 'ComboPlan',
  ComboPlanService: 'ComboPlanService',
  Service: 'Service',
  ServiceTrading: 'ServiceTrading'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
